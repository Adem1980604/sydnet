<!DOCTYPE html>
<html lang="da">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Portefølje detaljer</title>
  <link rel="stylesheet" href="/portefoljeDetalje.css">

      <!--Kilde til pie chart https://www.chartjs.org/docs/latest/charts/doughnut.html-->
        <!-- Kilde til linje chart https://www.chartjs.org/docs/latest/charts/line.html-->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>

<body>
  <aside class="sidebar">
    <div class="logo">
      <h3>SYDNET</h3>
    </div>    
    <ul>
      <li><a href="/bruger/dashboard">Dashboard</a></li>
      <li><a href="/portefoljestyring/kontooplysninger">Kontooplysninger</a></li>
      <li><a href="/portefoljestyring/portefoeljeoversigt">Porteføljeoversigt</a></li>
    </ul>

  </aside>
  <main class="main-content">
    <div class="header">
      <h1><%= portefolje.navn %></h1>
      <div class="header-buttons">
        <button class="handels-knap" onclick="åbnHistorikPopup()">Handels Historik</button>
        <button class="handels-knap" onclick="åbnPopup()">Opret Handel/Salg</button>
      </div>
    </div>

    <div class="charts-container">
  <!-- Line Chart -->
  <div class="chart-card">
    <h4>Porteføljeudvikling</h4>
    <canvas id="accountChart"></canvas>
  </div>

  <!-- Donut Chart -->
  <div class="chart-card">
    <h4>Fordeling af værdi</h4>
    <canvas id="portfolioPieChart"></canvas>
  </div>
</div>

   <!-- Vi udregner det samlede totale urealiserede gevinst eller tab, 
    og sætter det ind som status oven over porteføjeaktielisten -->
  
    <div class="grid-layout">
      <div class="summary-card">
        <!-- Viser samlet urealiseret gevinst/tab på hver portefølje detalje side-->
        <% let totalUrealiseretGevinstTab2 = 0; %>
        <% for (let i = 0; i < ejerListeFiltreret.length; i++) {
          const e2 = ejerListeFiltreret[i];
          const samletVaerdi2 = e2.antal * e2.pris * valutakurs;  // Forventet værdi = antal * aktuel pris
          const erhvervelsesPris2 = e2.antal * e2.gak; // Erhvervelsespris = antal * GAK;
          const gevinstTab2 = samletVaerdi2 - erhvervelsesPris2; 
          totalUrealiseretGevinstTab2 = totalUrealiseretGevinstTab2 + gevinstTab2;
        }          
        %>
        <div class="total-value">
          <p>Samlet urealiseret gevinst/tab</p>
          <% if (totalUrealiseretGevinstTab2 >= 0) { %>
            <h2 class="positive">+<%= Number(totalUrealiseretGevinstTab2).toFixed(2) %> <%= valuta %></h2>
          <% } else { %>
            <h2 class="negative"><%= Number(totalUrealiseretGevinstTab2).toFixed(2) %> <%= valuta %></h2>
          <% } %>
        </div>
      </div>
    </div>
    <!-- Aktie tabel -->
    <section class="stock-table">
      <h3>Aktier i portefølje</h3>
      <table>
        <thead>
          <tr>
            <th>Navn</th>
            <th>Volume</th>
            <th>Gms. Anskaf. Kurs</th>
            <th>Nuv. Pris pr stk</th>
            <th>Nuv. Forventet værdi</th>            
            <th>Urealiseret gevinst/tab</th>
          </tr>
        </thead>
        <tbody>          
          <% for (let i = 0; i < ejerListeFiltreret.length; i++) {
            const e = ejerListeFiltreret[i];
            const samletVaerdi = e.antal * e.pris * valutakurs;  // Forventet værdi = antal * aktuel pris
            const erhvervelsesPris = e.antal * e.gak; // Erhvervelsespris = antal * GAK
            const gevinstTab = samletVaerdi - erhvervelsesPris;
            const aktuelPrisIBaseCurrency = e.pris * valutakurs;            
          %>
              <tr> <!-- Start ny række -->
                <td><%= e.navn %> (<%= e.symbol %>)</td> <!-- Navn -->
                <td><%= e.antal %> stk.</td> <!-- Antal aktier -->
                <td><%= e.gak.toFixed(2) %> <%= valuta %></td> <!-- GAK -->
                <td><%= Number(aktuelPrisIBaseCurrency).toFixed(2) %> <%= valuta %></td> <!-- Aktuel pris pr stk -->
                <td><%= samletVaerdi.toFixed(2) %> <%= valuta %></td> <!-- Forventet Samlet værdi -->
                <% if (gevinstTab >= 0) { %>
                  <td class="positive">+<%= gevinstTab.toFixed(2) %> <%= valuta %></td> <!-- Gevinst -->
                <% } else { %>
                  <td class="negative"><%= gevinstTab.toFixed(2) %> <%= valuta %></td> <!-- Tab -->
                <% } %>
                <td>
                  <a href="/portefoljestyring/vaerdipapir/<%= e.symbol %>" class="detalje-knap">Detaljer</a>
                </td>

              </tr> 
          <% } %>
          </tbody>
      </table>
    </section>

    <!-- Handels historik popup -->
    <div id="historikPopup" class="popup" style="display: none;">
      <div class="popup-indhold">
        <h2>Handelshistorik</h2>
        <table>
          <thead>
            <tr>
              <th>Dato</th>
              <th>Type</th>
              <th>Symbol</th>
              <th>Antal</th>
              <th>Pris</th>
              <th>Total</th>
            </tr>
          </thead>
          <tbody>
            <% for (let i = 0; i < handler.length; i++) { 
              const h = handler[i];
              const total = h.antal * h.pris;
            %>
            <tr>
              <td><%= new Date(h.datotid).toLocaleDateString() %></td>
              <td><%= h.salg_koeb ? 'Salg' : 'Køb' %></td>
              <td><%= h.symbol %></td>
              <td><%= h.antal %> stk</td>
              <td><%= Number(h.pris).toFixed(2) %> </td>
              <td><%= total.toFixed(2) %> DKK</td>
            </tr>
            <% } %>
          </tbody>
        </table>
        <button onclick="lukPopup()">Luk</button>
      </div>
    </div>

    <!-- Popup til Opret Handel/Salg -->
<div id="popup" class="popup" style="display: none;">
  <div class="popup-indhold">
    <h2>Opret Handel/Salg</h2>

    <!-- Vælg om det er køb eller salg -->
    <label>Vælg handelstype:</label>
    <label class="switch">
      <input type="checkbox" id="handelstype-toggle">
      <span class="slider round"></span>
    </label>
    <span id="handelstype-label">Køb</span>

    <!--Søgefelt til aktier-->
    <input type="text" id="aktieSoegning" placeholder="Søg efter værdipapir">
    <ul id="vaerdiResultat"></ul>

    <!-- Formular til køb/salg -->
    <form id="handelForm">
      <input type="number" id="antal" placeholder="Antal" required>
      <label for="samlet_pris">Pris per aktie i USD</label>
      <input type="number" id="samlet_pris" placeholder="Pris" readonly>

      <p id="beregnet_pris">Samlet pris: 0 DKK</p>

      <label>Værdi-type:</label>
      <select id="værditype" name="værditype" required>
        <option value="aktie">Aktie</option>
        <option value="obligation">Obligation</option>
        <option value="ETF">ETF</option>
      </select>

      <button class="popup-knap" type="submit">Bekræft Handel/Salg</button>
    </form>
    <button class="popup-knap" onclick="lukPopup()">Luk</button>
  </div>
</div>

  </main>

   <!-- **************************** SCRIPT START ********************** -->
  <script>
  

    // tager fat i id for konti og portefølje og ejerliste
    const konto_id = "<%= konto_id %>";
    const portefolje_id = "<%= portefolje.portefoelje_id %>";
    const brugerensAktier = JSON.parse('<%- JSON.stringify(ejerListeFiltreret) %>');
    let nuvaerendeAktiePris;
    let symbol;
    let valuta = "<%= valuta %>"; // Valuta forkortelse
    let valutakurs = "<%= valutakurs %>"; // Valuta kurs i mellem USD og konto base currency - dvs. hvis tilknyttet konto er i USD så er valutakurs = 1. Hvis tilknyttet konto er i DKK er valutakurs = 6,5 
    let valgtAktie = [];
    let historiskVaerdi = "<%= historiskVaerdi %>"; 

    // funktion til at åbne popup for opret handel eller salg
    function åbnPopup() {
      document.getElementById("popup").style.display = "block";
    };

     // funktion til at åbne popup for handels historik
    function åbnHistorikPopup() {
      document.getElementById("historikPopup").style.display = "block";
    }

    // funktionen til at lukke popup
    function lukPopup() {
      // Lukker begge popup, hvis de er synlige
      document.getElementById('popup').style.display = 'none';
      document.getElementById('historikPopup').style.display = 'none';
    };

    // Henter HTML-elementerne til toggle-knappen og teksten der viser handelstypen
    const toggle = document.getElementById("handelstype-toggle");
    const label = document.getElementById("handelstype-label");

    // Når brugeren klikker på toggle-knappen (skifter mellem køb og salg)
    toggle.addEventListener("change", function () {
      // Hvis checkboxen er slået til (checked = true), så er det et salg
      if (toggle.checked) {
        label.textContent = "Salg"; // Vis teksten "Salg"
      } else {
        label.textContent = "Køb"; // Ellers vis "Køb"
      }
    });


    // Henter formular-elementet fra HTML (popup til handel)
    const form = document.getElementById("handelForm");

    // Når brugeren forsøger at indsende formularen
    form.addEventListener("submit", async function (event) {
      event.preventDefault();
    
      // Tjekker om brugeren har valgt "salg" via toggle-knap
      const isSalg = document.getElementById("handelstype-toggle").checked;
      let type;
      if (isSalg) {
        type = "salg";
      } else {
        type = "kob";
      }

      // Hvis brugeren vil sælge, skal vi tjekke om de ejer aktien og har nok
      if (type === "salg") {
        let fundet = false; // Bruges til at finde aktien i ejerlisten
        let ejerAntal = 0;  // Hvor mange aktier brugeren ejer
      
        // Gennemgå alle aktier brugeren ejer
        for (let i = 0; i < brugerensAktier.length; i++) {
          if (brugerensAktier[i].symbol === valgtAktie.symbol) {
            ejerAntal = brugerensAktier[i].antal;
            fundet = true;
            break;
          }
        }      
        const antalBrugerVilSælge = parseInt(document.getElementById("antal").value);
      
        // Hvis brugeren ikke ejer aktien, vis fejl
        if (!fundet) {
          alert("Du ejer ikke denne aktie og kan derfor ikke sælge den.");
          return; // Stop formularen
        }
      
        // Hvis brugeren prøver at sælge flere end de ejer
        if (antalBrugerVilSælge > ejerAntal) {
          alert(`Du prøver at sælge ${antalBrugerVilSælge} stk, men du ejer kun ${ejerAntal} stk.`);
          return; // Stop formularen
        }
      }

      // Opretter et data-objekt med de informationer der skal sendes til serveren
      const data = {
        konto_id,
        vaerditype: document.getElementById("værditype").value,
        antal: document.getElementById("antal").value,
        //pris: document.getElementById("samlet_pris").value,
        pris: nuvaerendeAktiePris,
        valuta: valuta,
        type,
        symbol: valgtAktie.symbol
      };

      // Sender handlen til portefoljestyring.js via fetch (POST-request)
      const svar = await fetch(`/portefoljestyring/${portefolje_id}/handel`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data)
      });

      const resultat = await svar.json(); // Får svar tilbage fra serveren

      // Hvis alt gik godt
      if (resultat.success) {
        if (type === "kob") {
          alert("Handel oprettet!"); // Køb
        } else if (type === "salg") {
          alert("Salg gennemført!"); // Salg
        }
        lukPopup();       // Lukker popup-vinduet
        location.reload(); // Opdaterer siden så nye værdier vises
      } else {
        // Noget gik galt – vis en fejlbesked
        alert("Noget gik galt");
      }
});

  
//**************************** SEARCHBAR FUNKTIONALITET ********************** -->

//Finder aktie pris på baggrund af bruger input i aktieSoegning's feltet
async function aktiesoeg() {
  //Finder ud af hvilken aktie brugeren har søgt efter  
  const symbol = document.getElementById("aktieSoegning").value;
  const response = await fetch(`/aktiesoeg/hentaktiekurs/${symbol}`);
  const data2 = await response.json();
  nuvaerendeAktiePris = Object.values(data2["Weekly Time Series"])[0]["1. open"];
  //console.log(nuvaerendeAktiePris); 
  valgtAktie.pris = nuvaerendeAktiePris;
  valgtAktie.symbol = symbol;  
  //console.log(valgtAktie); 
}  



// vi antager at  brugeren ikke har valgt en aktie 
const input = document.getElementById("aktieSoegning");
//console.log("**********************input********************");
//console.log(input);
const resultatListe = document.getElementById("vaerdiResultat");

// Når brugeren skriver antal så kalder vi på funktionen der beregner prisen
document.getElementById("antal").addEventListener("input", function () {
  beregnSamletPris();
});

// opertter en funktion der ganger antallet af de valgte aktier med prisen 
async function beregnSamletPris(){  
  //Soeg efter aktien og find prisen ( vi gemme pris i global variable )
  await aktiesoeg();
  // henter antalet af aktier vagt 
  const antal = parseFloat(document.getElementById("antal").value);
  const visning = document.getElementById("beregnet_pris")

  if(antal > 0) {
    //let samlet = valgtAktie.pris * antal;     
    //console.log(nuvaerendeAktiePris);
    //console.log(antal);
    //console.log(valuta);
    //console.log(valutakurs);
    let samlet = nuvaerendeAktiePris * antal * valutakurs; 
    visning.textContent = ` Samlet i kontoens valuta: ${samlet.toFixed(2)} ${valuta}`  // vi viser den samlet beregnet pris 
    document.getElementById("samlet_pris").value = nuvaerendeAktiePris;
  };
  
};



//*********************************************chart for line ********************************

async function visPortfolioGraf() {
  if(Chart.getChart("accountChart")) {
    Chart.getChart("accountChart")?.destroy()
  }
  const ctx = document.getElementById('accountChart').getContext('2d');

  const nu = new Date();
  const maanedLabels = [];
  const vaerdier = [];

  const startMaaned = 0; // Januar = måned 0
  const slutMaaned = nu.getMonth(); // Aktuel måned (0-indekseret)

  //console.log("****************0*********************");
  //console.log(historiskVaerdi[0]);
  //console.log("****************1*********************");
  //console.log(historiskVaerdi[1]);
  //console.log("****************2*********************");
  //console.log(historiskVaerdi[2]);

  // Bygger data til grafen og beregner total
  <% for (let m = 0; m < historiskVaerdi.length; m++) { %>      
      <%if (m < historiskVaerdi.length) {%>
        maanedLabels.push("<%= historiskVaerdi[m].datotid.getFullYear() %>-<%= historiskVaerdi[m].datotid.getMonth()+1%>-<%= historiskVaerdi[m].datotid.getDate()%>");
        vaerdier.push(<%= historiskVaerdi[m].vaerdi %>);    // Man skal ikke gange med valuta fordi historiske data bliver gemt i konto's base currency
      <% } 
      else {%>
        <% let today = new Date();%>
        maanedLabels.push("<%= today.getFullYear() %>-<%= today.getMonth()+1%>-<%= today.getDate()%>");
        vaerdier.push(<%= totalForventetVaerdi*valutakurs %>); // Faktisk værdi fra EJS for den aktuelle måned
      <%}%>
  <% } %>
  // Push det sidste - altså idag 
  
  <% let today = new Date();%>
  maanedLabels.push("<%= today.getFullYear() %>-<%= today.getMonth() + 1 %>-<%= today.getDate()%>");
  vaerdier.push(<%= totalForventetVaerdi*valutakurs %>); // Faktisk værdi fra EJS for den aktuelle måned

    // Opsæt data og konfiguration
    const data = {
      labels: maanedLabels,
      datasets: [{
        label: "Porteføljeværdi",
        data: vaerdier,
        borderColor: '#7c4dff',
        backgroundColor: 'rgba(124, 77, 255, 0.2)',
        fill: true,
        tension: 0.4,
        borderWidth: 2
      }]
    };
    const config = {
      type: 'line',
      data: data,
      options: {
        responsive: true,
        maintainAspectRatio: true,
        aspectRatio: 2, // Forholdet mellem bredde og højde (2:1)
        plugins: {
          legend: {
            labels: { color: '#ffffff' }
          },
          tooltip: {
            callbacks: {
              title: function (tooltipItems) {
                return tooltipItems[0].label; // måned og år vises som tooltip
              }
            }
          }
        },
        scales: {
          x: {
            ticks: {
              color: '#ffffff'
            },
            grid: {
              color: 'rgba(255, 255, 255, 0.1)'
            }
          },
          y: {
            ticks: {
              color: '#ffffff',
              callback: function (value) {
                return value.toLocaleString('da-DK') + " " + valuta;
              }
            },
            grid: {
            color: 'rgba(255, 255, 255, 0.1)'
            },
            title: {
            display: true,
            text: "Værdi (DKK)",
              color: '#ffffff'
            }
          }
        }
      }
    };
    new Chart(ctx, config);
  }

  visPortfolioGraf();


 //**************************** piechart **********************

// hent alle live priser som bruges til piechart
 async function hentLivePriser(symboler) {
  const priser = [];

  for (let i = 0; i < symboler.length; i++) {
    const symbol = symboler[i];

    const response = await fetch(`/aktiesoeg/hentaktiekurs/${symbol}`);
    const data = await response.json();

    const livePris = Object.values(data["Weekly Time Series"])[0]["1. open"];
    
    priser.push({
      symbol: symbol,
      pris: parseFloat(livePris)
    });
  }

  return priser;
}

 const donutLabels = []; // array der indeholder navne og symboler på akten
  const donutData = []; // array der indholder værdierne for porteføljen 



      // Funktion der laver én tilfældig farve
  function randomRgbFarve() {
  const r = Math.floor(Math.random()*80)+60;  
  const g = Math.floor(Math.random()*80)+80;   
  const b = Math.floor(Math.random()*100)+100; 
  return `rgb(${r},${g},${b})`;
}


  // Funktion der laver en array af tilfældige farver
  function genererMangeTilfaeldigeFarver(antal) {
    const farver = [];
    for (let i = 0; i < antal; i++) {
      farver.push(randomRgbFarve());
    }
    return farver;
  }

// funktionen der sørger for at vise donut chart
  async function visDonutChart() {
  const ctx = document.getElementById('portfolioPieChart').getContext('2d');

  // Henter alle symboler 
  const symboler = [];
  for (let i = 0; i < brugerensAktier.length; i++) {
    symboler.push(brugerensAktier[i].symbol);
  }

  // Henter live priser
  const livePriser = await hentLivePriser(symboler);

  // Nulstil arrays
  donutLabels.length = 0;
    donutData.length = 0;

  // Bygger labels og data
  for (let i = 0; i < brugerensAktier.length; i++) {
    const aktie = brugerensAktier[i];
    if (aktie.antal > 0) {
        let pris = 0;
        for (let j = 0; j < livePriser.length; j++) {
            if (livePriser[j].symbol === aktie.symbol) {
                pris = livePriser[j].pris;
                break;
            }
        }

        const vaerdi = aktie.antal * pris;

        donutLabels.push(`${aktie.navn} (${aktie.symbol})`);
        donutData.push(vaerdi);
    }
}

  // Finder total værdi
  let total = 0;
  for (let i = 0; i < donutData.length; i++) {
    total += donutData[i];
  }

  // Tilføjer procentdele i labels
  const labelsMedProcent = [];
  for (let i = 0; i < donutLabels.length; i++) {
    let procent = (donutData[i] / total) * 100;
    procent = procent.toFixed(1);
    labelsMedProcent.push(donutLabels[i] +"(" + procent + "%)");
  }


  const data = {
    labels: labelsMedProcent,
    datasets: [{
      data: donutData,
      backgroundColor:genererMangeTilfaeldigeFarver(donutData.length),
      borderColor: '#ffffff',
      borderWidth: 2,
      cutout: '65%'
    }]
  };

  const config = {
    type: 'doughnut',
    data: data,
    options: {
      responsive: true,
      maintainAspectRatio: true,
      aspectRatio: 2, // Forholdet mellem bredde og højde (2:1)
      plugins: {
        legend: {
          position: 'right',
          labels: {
            color: '#ffffff',
            font: {
              size: 14,
              family: 'Arial, sans-serif'
            },
            padding: 15,
            usePointStyle: true
          }
        },
        title: {
          display: true,
          text: 'Fordeling af værdi i portefølje',
          color: '#ffffff',
          font: {
            size: 14,
            weight: 'bold',
            family: 'Arial, sans-serif'
          },
          padding: {
            bottom: 20
          }
        }
      },
      layout: {
        padding: {
          top: 20,
          bottom: 20,
          left: 20,
          right: 20
        }
      }
    }
  };



  new Chart(ctx, config);


};

window.onload = function() {
  visPortfolioGraf();
  visDonutChart();
};


  </script>

</body>

</html>